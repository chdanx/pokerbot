from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InputFile
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters
)
from database import init_db, get_session, PokerGame, Player, generate_pie_chart_stats, game_players_association
from datetime import datetime
import logging
from collections import defaultdict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = init_db()
session = get_session(engine)

CITIES = ['–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫', '–í—ã–±–æ—Ä–≥']
PLAYERS = ['–î–∞–Ω–∏–ª–∞ –ë–∞–¥–µ—Ü–∫–∏–π', '–î–∞–Ω–∏–ª 72 –°–µ—Ä–≥–µ–µ–≤', '–°–µ–º–µ–Ω –ü–æ–ø–æ–≤–∏—á', 
            '–°–ª–∞–≤–∞ –•–∞—Ä—å–∫–æ–≤', '–î–º–∏—Ç—Ä–∏–π –ë–µ–¥–∞—Ä–µ–≤', '–î–º–∏—Ç—Ä–∏–π –õ—è–ø–∏–Ω', '–ú–∞–∫—Å–∏–º –ú–µ—Ä–∑–ª—ã–π',
            '–ú–∞–∫—Å–∏–º –ì–æ–º–æ–∑–æ–≤', '–ë–æ–≥–¥–∞–Ω –°–≤–µ—Ç–æ–Ω–æ—Å–æ–≤', '–ï–≤–≥–µ–Ω–∏–π –ß–µ—Ä–Ω–∏—Ü–∫–∏–π', '–†–æ–º–∞–Ω –†–µ–ø–Ω—è–∫–æ–≤',
              '–ê–Ω—è –ú–∞—Å–ª–∞–≤—Å–∫–∞—è']

PARTICIPANTS_REQUEST_START_DATE = datetime.strptime('27.05.2025', '%d.%m.%Y').date()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
(
    MAIN_MENU,
    ADD_DATE,
    ADD_CITY,
    ADD_PLAYERS_COUNT,
    ADD_WINNER,
    ADD_SECOND_PLACE,
    ADD_REBUYS,
    ADD_BUYIN,
    ADD_BIG_BLIND,
    ADD_DESCRIPTION,
    SEARCH_GAME,
    PLAYER_STATS,
    DELETE_GAME,
    DELETE_GAME_SELECT,
    PLAYER_STATS,
    ADD_PLAYERS,
    CONFIRM_PLAYERS,
    SEASONS_MENU,
    SEASON_POINTS,
) = range(19)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    return ReplyKeyboardMarkup([
        ['–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É', '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã'],
        ['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤', '–ù–∞–π—Ç–∏ –∏–≥—Ä—É'],
        ['–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É', '–°–µ–∑–æ–Ω—ã']
    ], resize_keyboard=True)

def get_seasons_keyboard():
    return ReplyKeyboardMarkup([
        ['–û—á–∫–∏ —Å–µ–∑–æ–Ω–∞'],
        ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ], resize_keyboard=True)

def get_cities_keyboard():
    return ReplyKeyboardMarkup([[city] for city in CITIES] + [['–û—Ç–º–µ–Ω–∞']], resize_keyboard=True)

def get_players_keyboard():
    return ReplyKeyboardMarkup([[player] for player in PLAYERS] + [['–û—Ç–º–µ–Ω–∞']], resize_keyboard=True)

async def check_cancel(update: Update, text: str) -> bool:
    if text == '–û—Ç–º–µ–Ω–∞':
        await update.message.reply_text(
            "‚ÑπÔ∏è –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_keyboard()
        )
        return True
    return False

async def delete_game_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        if 'delete_options' in context.user_data:
            del context.user_data['delete_options']
            
        await update.message.reply_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏–≥—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–°–ø–∏—Å–æ–∫':",
            reply_markup=ReplyKeyboardMarkup(
                [['–°–ø–∏—Å–æ–∫', '–û—Ç–º–µ–Ω–∞']],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        return DELETE_GAME
    except Exception as e:
        logger.error(f"Error in delete_game_start: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —É–¥–∞–ª–µ–Ω–∏—è")
        return MAIN_MENU

async def delete_game_execute(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        text = update.message.text.strip()
        
        if text == '–û—Ç–º–µ–Ω–∞':
            return await cancel(update, context)
            
        if text == '–°–ø–∏—Å–æ–∫':
            games = session.query(PokerGame).order_by(PokerGame.date.desc()).limit(5).all()
            if not games:
                await update.message.reply_text("–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return MAIN_MENU
                
            keyboard = []
            context.user_data['delete_options'] = {}
            
            response = "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
            for i, game in enumerate(games, 1):
                response += f"{i}. {game.date.strftime('%d.%m.%Y')} - {game.winner}\n"
                keyboard.append([str(i)])
                context.user_data['delete_options'][str(i)] = game.id
                
            keyboard.append(['–û—Ç–º–µ–Ω–∞'])
            
            await update.message.reply_text(
                response,
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
            return DELETE_GAME_SELECT
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
        try:
            date_obj = datetime.strptime(text, '%d.%m.%Y').date()
            games = session.query(PokerGame).filter(PokerGame.date == date_obj).all()
            
            if not games:
                await update.message.reply_text("–ò–≥—Ä –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return DELETE_GAME
                
            if len(games) == 1:
                game = games[0]
                session.delete(game)
                session.commit()
                await update.message.reply_text(
                    f"‚úÖ –ò–≥—Ä–∞ —É–¥–∞–ª–µ–Ω–∞:\n{game.date.strftime('%d.%m.%Y')}",
                    reply_markup=get_main_keyboard()
                )
                return MAIN_MENU
            else:
                context.user_data['delete_options'] = {
                    str(i): game.id for i, game in enumerate(games, 1)
                }
                response = "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä:\n\n"
                for i, game in enumerate(games, 1):
                    response += f"{i}. {game.winner} (–ë–∞–Ω–∫: {game.bank})\n"
                    
                await update.message.reply_text(
                    response,
                    reply_markup=ReplyKeyboardMarkup(
                        [[str(i)] for i in range(1, len(games)+1)] + [['–û—Ç–º–µ–Ω–∞']],
                        resize_keyboard=True
                    )
                )
                return DELETE_GAME_SELECT
                
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            return DELETE_GAME
            
    except Exception as e:
        logger.error(f"Error in delete_game_execute: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è")
        return MAIN_MENU

async def delete_game_select(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        if update.message.text == '–û—Ç–º–µ–Ω–∞':
            return await cancel(update, context)
            
        if 'delete_options' not in context.user_data:
            await update.message.reply_text("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
            return MAIN_MENU
            
        choice = update.message.text.strip()
        if choice not in context.user_data['delete_options']:
            await update.message.reply_text("‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞")
            return DELETE_GAME_SELECT
            
        game_id = context.user_data['delete_options'][choice]
        game = session.query(PokerGame).get(game_id)
        
        if not game:
            await update.message.reply_text("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return MAIN_MENU
            
        session.delete(game)
        session.commit()
        
        await update.message.reply_text(
            f"‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞:\n"
            f"–î–∞—Ç–∞: {game.date.strftime('%d.%m.%Y')}\n"
            f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {game.winner}",
            reply_markup=get_main_keyboard()
        )
        return MAIN_MENU
        
    except Exception as e:
        logger.error(f"Error in delete_game_select: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
        return MAIN_MENU

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    with open('hi_pic.jpg', 'rb') as photo:
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=InputFile(photo),
            caption="üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É—á–µ—Ç–∞ –Ω–∞—à–∏—Ö –ø–æ–∫–µ—Ä–Ω—ã—Ö –∏–≥—Ä.",
            reply_markup=get_main_keyboard()
        )
    return MAIN_MENU
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )
    return MAIN_MENU

async def add_game_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    await update.message.reply_text(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏–≥—Ä—ã (–î–î.–ú–ú.–ì–ì–ì–ì):",
        reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∞']], resize_keyboard=True)
    )
    return ADD_DATE

async def add_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if await check_cancel(update, update.message.text):
        return MAIN_MENU

    try:
        date_obj = datetime.strptime(update.message.text, '%d.%m.%Y').date()
        context.user_data['game_date'] = date_obj
        await update.message.reply_text(
            "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
            reply_markup=get_cities_keyboard()
        )
        return ADD_CITY
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–î–î.–ú–ú.–ì–ì–ì–ì):")
        return ADD_DATE

async def add_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if await check_cancel(update, update.message.text):
        return MAIN_MENU
    
    if update.message.text not in CITIES:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return ADD_CITY
    
    context.user_data['city'] = update.message.text
    await update.message.reply_text(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤:",
        reply_markup=ReplyKeyboardRemove()  
    )
    return ADD_PLAYERS_COUNT

async def add_players_count(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if await check_cancel(update, update.message.text):
        return MAIN_MENU
    
    try:
        players_count = int(update.message.text)
        if players_count < 2:
            await update.message.reply_text("–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
            return ADD_PLAYERS_COUNT
            
        context.user_data['players_count'] = players_count
        await update.message.reply_text(
            "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:",
            reply_markup=get_players_keyboard()
        )
        return ADD_WINNER
    except ValueError:
        await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return ADD_PLAYERS_COUNT

async def add_winner(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if await check_cancel(update, update.message.text):
        return MAIN_MENU
    
    if update.message.text not in PLAYERS:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return ADD_WINNER
    
    context.user_data['winner'] = update.message.text
    await update.message.reply_text(
        "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω—è–≤—à–µ–≥–æ 2 –º–µ—Å—Ç–æ:",
        reply_markup=get_players_keyboard()
    )
    return ADD_SECOND_PLACE

async def add_second_place(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if await check_cancel(update, update.message.text):
        return MAIN_MENU
    
    if update.message.text not in PLAYERS:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return ADD_SECOND_PLACE

    context.user_data['second_place'] = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if context.user_data['game_date'] >= PARTICIPANTS_REQUEST_START_DATE:
        available_players = [player for player in PLAYERS if player not in [context.user_data['winner'], context.user_data['second_place']]]
        keyboard = ReplyKeyboardMarkup([[player] for player in available_players] + [['–û—Ç–º–µ–Ω–∞']], resize_keyboard=True)
        await update.message.reply_text("‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≥—Ä—ã (–≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞):", reply_markup=keyboard)
        return CONFIRM_PLAYERS
    else:
        # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –∏–≥—Ä –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–±–∞–µ–≤:")
        return ADD_REBUYS


async def add_players(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if await check_cancel(update, update.message.text):
        return MAIN_MENU
    
    context.user_data['selected_players'] = []

    # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –∏–≥—Ä–æ–∫–∞, –∑–∞–Ω—è–≤—à–µ–≥–æ –≤—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ, –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    available_players = [player for player in PLAYERS if player not in [context.user_data['winner'], context.user_data['second_place']]]

    keyboard = ReplyKeyboardMarkup([[player] for player in available_players] + [['–û—Ç–º–µ–Ω–∞']], resize_keyboard=True)

    await update.message.reply_text(
        "üìå –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≥—Ä—ã (–≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞):",
        reply_markup=keyboard
    )
    return CONFIRM_PLAYERS


async def confirm_players(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    selected_player = update.message.text

    if selected_player not in PLAYERS:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return CONFIRM_PLAYERS

    if 'selected_players' not in context.user_data:
        context.user_data['selected_players'] = []

    if selected_player not in context.user_data['selected_players']:
        context.user_data['selected_players'].append(selected_player)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    total_players = len(context.user_data['selected_players']) + 2  # +2 –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—Ç–∞
    if total_players >= context.user_data['players_count']:
        await update.message.reply_text(
            f"‚ÑπÔ∏è –í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(context.user_data['selected_players'])}\n\n"
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–±–∞–µ–≤:",
            reply_markup=ReplyKeyboardRemove()
        )
        return ADD_REBUYS

    available_players = [player for player in PLAYERS if player not in [context.user_data['winner'], context.user_data['second_place']] + context.user_data['selected_players']]

    keyboard = ReplyKeyboardMarkup([[player] for player in available_players] + [['–û—Ç–º–µ–Ω–∞']], resize_keyboard=True)

    await update.message.reply_text(
        f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(context.user_data['selected_players'])}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞:",
        reply_markup=keyboard
    )
    return CONFIRM_PLAYERS

async def players_confirmed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == '–ì–æ—Ç–æ–≤–æ':
        await update.message.reply_text(
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(context.user_data['selected_players'])}\n\n"
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–±–∞–µ–≤:",
            reply_markup=ReplyKeyboardRemove()
        )
        return ADD_REBUYS
    else:
        return await confirm_players(update, context)

async def add_rebuys(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        context.user_data['rebuys'] = int(update.message.text)
        await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∞–π-–∏–Ω–∞:")
        return ADD_BUYIN
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return ADD_REBUYS

async def add_buyin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        context.user_data['buyin'] = float(update.message.text)
        await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–±–∏–∫–æ–≤:")
        return ADD_BIG_BLIND
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return ADD_BUYIN

async def add_big_blind(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        context.user_data['big_blind'] = int(update.message.text)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –±–∞–Ω–∫–∞
        players = context.user_data['players_count']
        rebuys = context.user_data['rebuys']
        buyin = context.user_data['buyin']
        bank = (players * buyin) + (rebuys * buyin)
        context.user_data['bank'] = round(bank, 2)
        
        await update.message.reply_text(
            f"‚ÑπÔ∏è –ë–∞–Ω–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω: {context.user_data['bank']}\n"
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
            reply_markup=ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        return ADD_DESCRIPTION
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return ADD_BIG_BLIND

async def add_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    description = update.message.text if update.message.text != '-' else None

    # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
    game = PokerGame(
        date=context.user_data['game_date'],
        city=context.user_data['city'],
        players_count=context.user_data['players_count'],  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
        winner=context.user_data['winner'],
        second_place=context.user_data['second_place'],
        rebuys=context.user_data['rebuys'],
        bank=context.user_data['bank'],
        buyin=context.user_data['buyin'],
        big_blind=context.user_data['big_blind'],
        description=description
    )

    # –î–ª—è –∏–≥—Ä –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–∞—Ç—ã –¥–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if context.user_data['game_date'] >= PARTICIPANTS_REQUEST_START_DATE:
        selected_players = context.user_data.get('selected_players', [])
        all_players = selected_players + [context.user_data['winner'], context.user_data['second_place']]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if len(all_players) != context.user_data['players_count']:
            await update.message.reply_text(
                f"–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ({len(all_players)}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ({context.user_data['players_count']})",
                reply_markup=get_main_keyboard()
            )
            return MAIN_MENU

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –≤ –∏–≥—Ä—É
        for player_name in all_players:
            player = session.query(Player).filter_by(name=player_name).first()
            if not player:
                player = Player(name=player_name)
                session.add(player)
            game.players.append(player)
    else:
        # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –∏–≥—Ä –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—Ç–∞
        for player_name in [context.user_data['winner'], context.user_data['second_place']]:
            player = session.query(Player).filter_by(name=player_name).first()
            if not player:
                player = Player(name=player_name)
                session.add(player)
            game.players.append(player)

    session.add(game)
    session.commit()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    response = (
        "‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
        f"üìÖ –î–∞—Ç–∞: {game.date.strftime('%d.%m.%Y')}\n"
        f"üèô –ì–æ—Ä–æ–¥: {game.city}\n"
        f"üë• –ò–≥—Ä–æ–∫–æ–≤: {game.players_count}\n"
        f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {game.winner}\n"
        f"ü•à 2 –º–µ—Å—Ç–æ: {game.second_place}\n"
        f"üí∞ –ë–∞–Ω–∫: {game.bank}\n\n"
    )

    if context.user_data['game_date'] >= PARTICIPANTS_REQUEST_START_DATE:
        response += f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join([p.name for p in game.players])}\n"

    await update.message.reply_text(
        response,
        reply_markup=get_main_keyboard()
    )
    return MAIN_MENU


async def show_recent_games(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    games = session.query(PokerGame).order_by(PokerGame.date.desc()).limit(5).all()
    
    if games:
        response = "üìå –ö—Ä–∞–π–Ω–∏–µ 5 –∏–≥—Ä:\n\n"
        for i, game in enumerate(games, 1):
            response += (
                f"{game.date.strftime('%d.%m.%Y')} - {game.city}\n"
                f"üë§ –ò–≥—Ä–æ–∫–æ–≤: {game.players_count}\n"
                f"üèÜ–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {game.winner}\n"
                f"ü•à2 –º–µ—Å—Ç–æ: {game.second_place}\n\n"
            )
    else:
        response = "–í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä."
    
    await update.message.reply_text(
        response,
        reply_markup=get_main_keyboard()
    )
    return MAIN_MENU

async def player_stats_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ '–≤—Å–µ' –¥–ª—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=ReplyKeyboardMarkup([['–≤—Å–µ']] + [[player] for player in PLAYERS] + [['–û—Ç–º–µ–Ω–∞']], resize_keyboard=True)
    )
    return PLAYER_STATS

async def seasons_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "üçÄ –ü–µ—Ä–≤—ã–π —Å–µ–∑–æ–Ω: –õ–∞–∫–µ—Ä–Ω—ã–π\n\n"
        "üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: –°–ª–∞–≤–∞ –•–∞—Ä—å–∫–æ–≤ ()\n"
        "ü•à –ü—Ä–µ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å: –î–∞–Ω–∏–ª–∞ –ë–∞–¥–µ—Ü–∫–∏–π ()\n"
        "üìÖ –°–µ–∑–æ–Ω –¥–ª–∏–ª—Å—è —Å –Ω–∞—á–∞–ª–∞ –≥—É–≥–ª-—Ç–∞–±–ª–∏—Ü—ã –¥–æ 31.05.2025",
        reply_markup=get_seasons_keyboard()
    )
    return SEASONS_MENU

async def show_season_points(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    SEASON_START_DATE = datetime.strptime('01.06.2025', '%d.%m.%Y').date()
    SEASON_END_DATE = datetime.strptime('30.11.2025', '%d.%m.%Y').date()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    players = session.query(Player).all()
    player_stats = []
    
    for player in players:
        # –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä—ã —Å–µ–∑–æ–Ω–∞ —Å —É—á–∞—Å—Ç–∏–µ–º –∏–≥—Ä–æ–∫–∞
        season_games = session.query(PokerGame)\
            .join(PokerGame.players)\
            .filter(
                Player.id == player.id,
                PokerGame.date >= SEASON_START_DATE,
                PokerGame.date <= SEASON_END_DATE
            ).all()
        
        if not season_games:
            continue
            
        # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        wins = len([g for g in season_games if g.winner == player.name])
        seconds = len([g for g in season_games if g.second_place == player.name])
        total_games = len(season_games)
        
        win_rate = (wins / total_games * 100) if total_games > 0 else 0
        second_rate = (seconds / total_games * 100) if total_games > 0 else 0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–∫–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–µ
        points = win_rate + 0.33 * second_rate
        player_stats.append((player.name, points, wins, seconds, total_games))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—á–∫–æ–≤
    player_stats.sort(key=lambda x: x[1], reverse=True)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç (–±–µ–∑ Markdown —Ä–∞–∑–º–µ—Ç–∫–∏)
    response = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞:\n\n"
    response += "–†–µ–π—Ç–∏–Ω–≥ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ:\n"
    response += "üÉè –û—á–∫–∏ = (–í–∏–Ω—Ä–µ–π—Ç –∑–∞ 1 –º–µ—Å—Ç–∞) + 0.33 * (–í–∏–Ω—Ä–µ–π—Ç –∑–∞ 2 –º–µ—Å—Ç–∞)\n"
    response += "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ –≤–∏–¥–µ: (–û—á–∫–∏ / –ü–æ–±–µ–¥—ã –≤ —Å–µ–∑–æ–Ω–µ / –í—Ç–æ—Ä—ã–µ –º–µ—Å—Ç–∞ –≤ —Å–µ–∑–æ–Ω–µ / –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä)\n\n"
    
    for i, (name, points, wins, seconds, total) in enumerate(player_stats, 1):
        win_rate = (wins / total * 100) if total > 0 else 0
        second_rate = (seconds / total * 100) if total > 0 else 0
        response += f"üîª {name}: {points:.1f} / {wins} / {seconds} / {total}\n\n"
    
    if not player_stats:
        response = "–í —Ç–µ–∫—É—â–µ–º —Å–µ–∑–æ–Ω–µ –µ—â–µ –Ω–µ –±—ã–ª–æ –∏–≥—Ä."
    
    await update.message.reply_text(
        response,
        reply_markup=get_seasons_keyboard(),
        parse_mode=None  
    )
    return SEASONS_MENU

async def show_player_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    player_name = update.message.text

    if await check_cancel(update, update.message.text):
        return MAIN_MENU

    if player_name.lower() == '–≤—Å–µ':
        return await show_all_stats(update, context)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Å–µ–∑–æ–Ω–∞
    SEASON_START_DATE = datetime.strptime('01.06.2025', '%d.%m.%Y').date()
    SEASON_END_DATE = datetime.strptime('30.11.2025', '%d.%m.%Y').date()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–≥—Ä—ã –∏–≥—Ä–æ–∫–∞
    games_participated = session.query(PokerGame).join(PokerGame.players).filter(
        Player.name == player_name
    ).order_by(PokerGame.date.desc()).all()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
    wins_all = [game for game in games_participated if game.winner == player_name]
    seconds_all = [game for game in games_participated if game.second_place == player_name]
    total_bank_won_all = sum(game.bank for game in wins_all)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–∑–æ–Ω
    season_games = [game for game in games_participated if SEASON_START_DATE <= game.date <= SEASON_END_DATE]
    season_wins = [game for game in season_games if game.winner == player_name]
    season_seconds = [game for game in season_games if game.second_place == player_name]
    season_top2 = len(season_wins) + len(season_seconds)
    season_bank = sum(game.bank for game in season_wins)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è —Å–µ–∑–æ–Ω–∞
    season_win_rate_top2 = (season_top2 / len(season_games) * 100) if season_games else 0
    season_win_rate = (len(season_wins) / len(season_games) * 100) if season_games else 0

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ {player_name}:\n\n"
        "‚ÑπÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:\n"
        f"üèÜ –ü–æ–±–µ–¥: {len(wins_all)}\n"
        f"ü•à –í—Ç–æ—Ä—ã—Ö –º–µ—Å—Ç: {len(seconds_all)}\n"
        f"üí∞ –û–±—â–∏–π –±–∞–Ω–∫, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤—ã–∏–≥—Ä–∞–Ω: {total_bank_won_all}\n\n"
        f"‚ÑπÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–∑–æ–Ω–∞ ({SEASON_START_DATE.strftime('%d.%m.%Y')}-{SEASON_END_DATE.strftime('%d.%m.%Y')}):\n"
        f"üèÜ –ü–æ–±–µ–¥ –≤ —Å–µ–∑–æ–Ω–µ: {len(season_wins)}\n"
        f"ü•à –í—Ç–æ—Ä—ã—Ö –º–µ—Å—Ç –≤ —Å–µ–∑–æ–Ω–µ: {len(season_seconds)}\n"
        f" –í—Å–µ–≥–æ –∏–≥—Ä –≤ —Å–µ–∑–æ–Ω–µ: {len(season_games)}\n"
        f"üéØ –ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ —Ç–æ–ø 2: {season_top2}/{len(season_games)}\n"
        f"üìà –í–∏–Ω—Ä–µ–π—Ç (—Ç–æ–ø 2): {season_win_rate_top2:.2f}%\n"
        f"üìà –í–∏–Ω—Ä–µ–π—Ç (–ø–æ–±–µ–¥—ã): {season_win_rate:.2f}%\n"
        f"üí∞ –ë–∞–Ω–∫ –≤ —Å–µ–∑–æ–Ω–µ: {season_bank}\n\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–±–µ–¥—ã
    if wins_all:
        response += "üèÜ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–±–µ–¥—ã:\n"
        for i, game in enumerate(wins_all[:3], 1):
            response += (
                f"{i}. {game.date.strftime('%d.%m.%Y')} - {game.city} (–ë–∞–Ω–∫: {game.bank})\n"
            )
        response += "\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–±–µ–¥—ã –≤ —Å–µ–∑–æ–Ω–µ
    if seconds_all:
        response += "ü•à –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—Ç–æ—Ä—ã–µ –º–µ—Å—Ç–∞:\n"
        for i, game in enumerate(seconds_all[:3], 1):
            response += (
                f"{i}. {game.date.strftime('%d.%m.%Y')} - {game.city}\n"
                f"   –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {game.winner}\n"
            )

    if not games_participated:
        response = f"–ò–≥—Ä–æ–∫–∞ {player_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

    await update.message.reply_text(
        response,
        reply_markup=get_main_keyboard(),
        parse_mode='Markdown'
    )
    return MAIN_MENU

async def show_all_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    all_games = session.query(PokerGame).all()

    img_buffer = generate_pie_chart_stats()

    stats = {}
    for game in all_games:
        for player in game.players:
            if player.name not in stats:
                stats[player.name] = {'wins_all': 0, 'seconds_all': 0, 'total_bank_won_all': 0, 'wins': 0, 'seconds': 0, 'total_games': 0, 'total_bank_won': 0}

            # –°—á–∏—Ç–∞–µ–º –ø–æ–±–µ–¥—ã, –≤—Ç–æ—Ä—ã–µ –º–µ—Å—Ç–∞ –∏ –±–∞–Ω–∫ –ø–æ –≤—Å–µ–º –∏–≥—Ä–∞–º
            if game.winner == player.name:
                stats[player.name]['wins_all'] += 1
                stats[player.name]['total_bank_won_all'] += game.bank
            if game.second_place == player.name:
                stats[player.name]['seconds_all'] += 1

            # –°—á–∏—Ç–∞–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —Ç–æ–ø 2 –∏ –≤–∏–Ω—Ä–µ–π—Ç—ã —Ç–æ–ª—å–∫–æ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
            if game.date >= PARTICIPANTS_REQUEST_START_DATE:
                stats[player.name]['total_games'] += 1

                if game.winner == player.name:
                    stats[player.name]['wins'] += 1
                    stats[player.name]['total_bank_won'] += game.bank
                elif game.second_place == player.name:
                    stats[player.name]['seconds'] += 1

    if not stats:
        await update.message.reply_text("–í –±–∞–∑–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≥—Ä–∞—Ö.")
        return MAIN_MENU

    response = "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    for player, data in sorted(stats.items(), key=lambda x: (x[1]['wins'], x[1]['seconds']), reverse=True):
        total_top2 = data['wins'] + data['seconds']
        win_rate_top2 = (total_top2 / data['total_games'] * 100) if data['total_games'] > 0 else 0
        win_rate_wins = (data['wins'] / data['total_games'] * 100) if data['total_games'] > 0 else 0

        response += (
            f"üë§ *{player}*\n"
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:\n"
            f"üèÜ –ü–æ–±–µ–¥: {data['wins_all']} | "
            f"ü•à –í—Ç–æ—Ä—ã—Ö –º–µ—Å—Ç: {data['seconds_all']}\n"
            f"üí∞ –û–±—â–∏–π –±–∞–Ω–∫, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤—ã–∏–≥—Ä–∞–Ω: {data['total_bank_won_all']}\n\n"
            # "–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∏–≥—Ä –ø–æ—Å–ª–µ 27 –º–∞—è 2025 –≥–æ–¥–∞:\n"
            # f"üéØ –ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ —Ç–æ–ø 2: {total_top2}/{data['total_games']}\n"
            # f"üìà –í–∏–Ω—Ä–µ–π—Ç (—Ç–æ–ø 2): {win_rate_top2:.2f}% | "
            # f"üìà –í–∏–Ω—Ä–µ–π—Ç (–ø–æ–±–µ–¥—ã): {win_rate_wins:.2f}%\n\n"
        )
    
    response += ("‚ÑπÔ∏è –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∫–∏, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞.\n\n")

    await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=img_buffer,
            caption="üìå –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Å–µ—Ö –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –±–∞–Ω–∫–æ–≤ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏",
            reply_markup=get_main_keyboard()
        )

    await update.message.reply_text(
        response,
        reply_markup=get_main_keyboard(),
        parse_mode='Markdown'
    )
    return MAIN_MENU

async def search_game_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "üìå –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏–≥—Ä—ã (–î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∞']], resize_keyboard=True)
    )
    return SEARCH_GAME

async def search_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    search_term = update.message.text
    
    try:
        search_date = datetime.strptime(search_term, '%d.%m.%Y').date()
        games = session.query(PokerGame).filter(PokerGame.date == search_date).all()
    except ValueError:
        games = session.query(PokerGame).filter(PokerGame.city.ilike(f"%{search_term}%")).all()
    
    if not games:
        await update.message.reply_text(
            "‚ÑπÔ∏è –ò–≥—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=get_main_keyboard()
        )
        return MAIN_MENU
    
    for game in games:
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ —Å–≤—è–∑—å many-to-many
        participants = session.query(Player).\
            join(game_players_association).\
            join(PokerGame).\
            filter(PokerGame.id == game.id).\
            all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
        response = (
            "üé≤ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ*\n\n"
            f"üìÖ –î–∞—Ç–∞: {game.date.strftime('%d.%m.%Y')}\n"
            f"üèô –ì–æ—Ä–æ–¥: {game.city}\n"
            f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: {game.players_count}\n"
            f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {game.winner}\n"
            f"ü•à 2 –º–µ—Å—Ç–æ: {game.second_place}\n"
            f"üí∞ –ë–∞–Ω–∫: {game.bank:.2f}\n"
            f"üîÑ –†–µ–±–∞–µ–≤: {game.rebuys}\n"
            f"üé´ –ë–∞–π-–∏–Ω: {game.buyin:.2f}\n"
            f"‚ô†Ô∏è –ë–ë: {game.big_blind}\n"
        )
        if game.date >= PARTICIPANTS_REQUEST_START_DATE:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if participants:
                response += "\nüë§ *–£—á–∞—Å—Ç–Ω–∏–∫–∏:*\n"
                for player in participants:
                    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—Ç–∞
                    if player.name == game.winner:
                        response += f"üëë {player.name}\n"
                    elif player.name == game.second_place:
                        response += f"ü•à {player.name}\n"
                    else:
                        response += f"üë§ {player.name}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if game.description:
            response += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {game.description}\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã
        await update.message.reply_text(
            response,
            reply_markup=get_main_keyboard(),
            parse_mode='Markdown'
        )
    
    return MAIN_MENU

def main() -> None:
    application = Application.builder().token("token").build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                MessageHandler(filters.Regex('^–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É$'), add_game_start),
                MessageHandler(filters.Regex('^–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã$'), show_recent_games),
                MessageHandler(filters.Regex('^–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤$'), player_stats_start),
                MessageHandler(filters.Regex('^–ù–∞–π—Ç–∏ –∏–≥—Ä—É$'), search_game_start),
                MessageHandler(filters.Regex('^–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É$'), delete_game_start),
                MessageHandler(filters.Regex('^–°–µ–∑–æ–Ω—ã$'), seasons_menu),
            ],
            ADD_DATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_date),
                MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel),
            ],
            ADD_CITY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_city),
                MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel),
            ],
            ADD_PLAYERS_COUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_players_count),
                MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel),
            ],
            ADD_WINNER: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_winner),
                MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel),
            ],
            ADD_SECOND_PLACE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_second_place),
                MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel),
            ],
            ADD_PLAYERS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_players),
                MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel),
            ],
            CONFIRM_PLAYERS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_players),
                MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel),
            ],
            ADD_REBUYS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_rebuys),
                MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel),
            ],
            ADD_BUYIN: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_buyin),
                MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel),
            ],
            ADD_BIG_BLIND: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_big_blind),
                MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel),
            ],
            ADD_DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_description),
                MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel),
            ],
            SEARCH_GAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, search_game),
                MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel),
            ],
            PLAYER_STATS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, show_player_stats),
                MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel),
            ],
            DELETE_GAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, delete_game_execute),
                MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel),
            ],
            DELETE_GAME_SELECT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, delete_game_select),
                MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel),
            ],
            SEASONS_MENU: [
                MessageHandler(filters.Regex('^–û—á–∫–∏ —Å–µ–∑–æ–Ω–∞$'), show_season_points),
                MessageHandler(filters.Regex('^–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$'), cancel),
            ],
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            CommandHandler('start', start),
            MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel),
        ],
    )
    
    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == '__main__':
    main()